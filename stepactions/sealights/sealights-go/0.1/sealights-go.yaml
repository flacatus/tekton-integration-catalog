apiVersion: tekton.dev/v1alpha1
kind: StepAction
metadata:
  name: sealights-go-scan
spec:
  description: >-
    This StepAction performs a Sealights scan for a Go project. It fetches Sealights credentials from an OpenShift secret, configures the Sealights CLI, 
    and scans the code for the specified component and Git revision. The Go environment is configured using the 'ubi9/go-toolset' image with the provided Go version.
  params:
    - name: go-version
      type: string
      description: "The Go version to use with the 'ubi9/go-toolset' image, in the format '1.x.y' (e.g., '1.21.3')."
    - name: sealights-secret
      type: string
      description: "The name of the Openshift secret containing Sealights credentials."
    - name: component
      type: string
      description: "The name of the Konflux component associated with the integration tests."
    - name: scm-provider
      type: string
      description: "The source control management (SCM) provider used for the project, such as 'github', 'gitlab'."
    - name: repository-url
      type: string
      description: "The name or URL of the source code repository (e.g., 'github.com/org/repo')."
      default: ""
    - name: branch
      type: string
      description: "The name of the Git branch to use for the operation (e.g., 'main' or 'feature-branch')."
      default: "main"
    - name: revision
      type: string
      description: "The Git revision (commit SHA) from which the test pipeline is originating."
    - name: pull-request-number
      type: string
      description: "The identifier number of the pull request/merge request."
      default: ""
    - name: target-branch
      type: string
      description: "The name of the target branch for the pull request, typically the branch into which the changes will be merged (e.g., 'main', 'develop')."
      default: "main"
    - name: source-code-volume
      type: string
      description: "The name of the volume where to store the source code when cloning."
  results:
    - name: build-session-id
      type: string
      description: "A unique identifier generated for the current sealights build session."
    - name: build-name
      type: string
      description: "A unique build name generated using the commit SHA and current date to prevent conflicts during test reruns."
  volumeMounts:
    - name: $(params.sealights-secret)
      mountPath: /usr/local/sealights-credentials
    - name: $(params.source-code-volume)
      mountPath: /source-code
  env:
    - name: COMPONENT
      value: $(params.component)
    - name: SCM_PROVIDER
      value: $(params.scm-provider)
    - name: REPOSITORY_URL
      value: $(params.repository-url)
    - name: BRANCH
      value: $(params.branch)
    - name: REVISION
      value: $(params.revision)
    - name: PULL_REQUEST_NUMBER
      value: $(params.pull-request-number)
    - name: TARGET_BRANCH
      value: $(params.target-branch)
  image: registry.access.redhat.com/ubi9/go-toolset:$(params.go-version)
  workindDir: /source-code
  script: |
    #!/bin/bash
    set -e

    export SEALIGHTS_TOKEN BUILD_NAME

    SEALIGHTS_TOKEN="$(cat /usr/local/sealights-credentials/token)"
    BUILD_NAME="${REVISION}_$(date +'%y%m%d.%H%M')"

    wget -qO- https://agents.sealights.co/slgoagent/latest/slgoagent-linux-amd64.tar.gz | tar -xzv
    wget -qO- https://agents.sealights.co/slcli/latest/slcli-linux-amd64.tar.gz | tar -xzv

    ./slcli config init --lang go --token "${SEALIGHTS_TOKEN}"

    if [[ -n "${PULL_REQUEST_NUMBER}" && "${PULL_REQUEST_NUMBER}" != "" ]]; then
      echo "[INFO] Generate build session id from a Pull Request source code"

      ./slcli config create-pr-bsid --app "${COMPONENT}" --target-branch "${TARGET_BRANCH}" --pull-request-number "${PULL_REQUEST_NUMBER}" \
          --latest-commit "${REVISION}" --repository-url "${REPOSITORY_URL}"
    else
      echo "[INFO] Creating build session ID (BSID) for app: ${COMPONENT}, branch: ${BRANCH}, build: ${BUILD_NAME}..."
      ./slcli config create-bsid --app "${COMPONENT}" --branch "${BRANCH}" --build "${BUILD_NAME}"
    fi

    ./slcli scan --bsid buildSessionId.txt --path-to-scanner ./slgoagent \
      --workspacepath ./ --scm git --scmProvider "${SCM_PROVIDER}"
