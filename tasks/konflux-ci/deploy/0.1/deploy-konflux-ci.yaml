---
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: deploy-konflux-ci
  labels:
    konflux-ci/kind: "true"
    app.kubernetes.io/version: "0.1"
  annotations:
    tekton.dev/pipelines.minVersion: "0.44.x"
    tekton.dev/tags: konflux
spec:
  description: |
    This task performs a full Konflux CI deployment. It clones the specified Git repository,
    checks out the desired branch, and runs deployment scripts using a kubeconfig retrieved from
    a Kubernetes secret. It is intended for use in OpenShift Pipelines or other Tekton environments.

  params:
    - name: cluster-access-secret
      description: Name of the Kubernetes Secret that contains the kubeconfig (base64 encoded) used to access the target cluster.
    - name: namespace
      description: Namespace where the above Secret is located.
    - name: repo-url
      description: URL of the Git repository containing the Konflux CI deployment scripts.
      default: https://github.com/konflux-ci/konflux-ci.git
    - name: repo-branch
      description: Git branch to check out when cloning the repository.
      default: main
    - name: create-test-resources
      description: 'Indicates if a set of test resources should be installed'
      default: 'true'
    - name: component-name
      description: 'Konflux component which will be deployment using a different image and/or code'
      default: ''
    - name: component-image-repository
      description: 'Image repository to use instead of the one specified in Konflux-CI'
      default: ''
    - name: component-image-tag
      description: 'Image tag to use instead of the one specified in Konflux-CI'
      default: ''
    - name: component-pr-owner
      description: 'Owner of the pull request to use instead of the one specified in Konflux-CI'
      default: ''
    - name: component-pr-sha
      description: 'SHA of the pull request to use instead of the one specified in Konflux-CI'
      default: ''

  volumes:
    - name: workdir
      emptyDir: {}

  stepTemplate:
    env:
      - name: KUBECONFIG
        value: /var/workdir/.kube/config
    volumeMounts:
      - mountPath: /var/workdir
        name: workdir

  steps:
    - name: clone-konflux-ci
      image: registry.redhat.io/openshift-pipelines/pipelines-git-init-rhel8@sha256:245e5f77eef067b48f7262de04485b4ab5f195736dc128d2c574f32bb05d3b2d
      workingDir: /var/workdir
      securityContext:
        runAsUser: 0
      args:
        - -url=$(params.repo-url)
        - -revision=$(params.repo-branch)
        - -path=.

    - name: update-kustomization
      image: quay.io/konflux-ci/tekton-integration-catalog/utils:latest
      workingDir: /var/workdir
      script: |
        #!/bin/bash
        set -euo pipefail
        
        COMPONENT_NAME="$(params.component-name)"
        IMAGE_REPO="$(params.component-image-repository)"
        IMAGE_TAG="$(params.component-image-tag)"
        PR_OWNER="$(params.component-pr-owner)"
        PR_SHA="$(params.component-pr-sha)"

        # Repo names do not match the ones of the component. Try to find the right kustomization.yaml based on the component name.
        KUSTOMIZATION_PATH=$(find konflux-ci/ -type f -name "kustomization.yaml" -path "*${COMPONENT_NAME%-service}*/core/*" | head -n 1)

        # Check if the file exists
        if [[ ! -f "${KUSTOMIZATION_PATH}" ]]; then
          echo "[WARNING] No substitutions will be applied as the kustomization file for $(params.component-name) has not been found."
          exit 0
        fi

        # Apply substitutions
        if [[ -n "$IMAGE_REPO" ]]; then
          echo "[INFO] Updating image repository to $IMAGE_REPO"
          yq -i e "(.images.[] | select(.name==\"quay.io/konflux-ci/${COMPONENT_NAME}\")) |= .newName=\"${IMAGE_REPO}\"" "$KUSTOMIZATION_PATH"
        fi

        if [[ -n "$IMAGE_TAG" ]]; then
          echo "[INFO] Updating image tag to $IMAGE_TAG"
          yq -i e "(.images.[] | select(.name==\"quay.io/konflux-ci/${COMPONENT_NAME}\")) |= .newTag=\"${IMAGE_TAG}\"" "$KUSTOMIZATION_PATH"
        fi

        if [[ -n "$PR_OWNER" && -n "$PR_SHA" ]]; then
          echo "[INFO] Updating GitHub reference to $PR_OWNER@$PR_SHA"
          yq -i e "(.resources[] | select(. ==\"*github.com/konflux-ci/${COMPONENT_NAME}/config/default*\")) |= \"https://github.com/${PR_OWNER}/${COMPONENT_NAME}/config/default?ref=${PR_SHA}\"" "$KUSTOMIZATION_PATH"
          yq -i e "(.resources[] | select(. ==\"*github.com/konflux-ci/${COMPONENT_NAME}/config/snapshotgc*\")) |= \"https://github.com/${PR_OWNER}/${COMPONENT_NAME}/config/snapshotgc?ref=${PR_SHA}\"" "$KUSTOMIZATION_PATH"
        fi

      when:
        - input: "$(params.component-name)"
          operator: notin
          values: [ "" ]

    - name: get-kubeconfig
      image: quay.io/konflux-ci/tekton-integration-catalog/utils:latest
      workingDir: /var/workdir
      script: |
        #!/bin/bash
        set -euo pipefail

        echo "[INFO] Retrieving kubeconfig from secret: $(params.cluster-access-secret) in namespace: $(params.namespace)"
        KUBECONFIG_B64=$(kubectl get secret "$(params.cluster-access-secret)" -n "$(params.namespace)" -o jsonpath='{.data.kubeconfig}' || true)

        if [[ -z "$KUBECONFIG_B64" ]]; then
          echo "[ERROR] Kubeconfig not found in secret $(params.cluster-access-secret) in namespace $(params.namespace)."
          exit 1
        fi

        mkdir -p /var/workdir/.kube
        echo "$KUBECONFIG_B64" | base64 -d > /var/workdir/.kube/config
        chmod 400 /var/workdir/.kube/config

        echo "[INFO] Verifying access to the target cluster..."
        kubectl cluster-info

    - name: deploy
      image: quay.io/konflux-ci/tekton-integration-catalog/utils:latest
      workingDir: /var/workdir
      script: |
        #!/bin/bash
        set -euo pipefail

        echo "[INFO] Installing Konflux CI dependencies"
        ./deploy-deps.sh
        ./wait-for-all.sh

        echo "[INFO] Installing Konflux CI..."
        ./deploy-konflux.sh

        kubectl get po -A

    - name: create-test-resources
      image: quay.io/konflux-ci/tekton-integration-catalog/utils:latest
      workingDir: /var/workdir
      script: |
        #!/bin/bash
        set -euo pipefail

        echo "[INFO] Applying Kyverno to reduce resources for testing"
        kubectl apply -f ./dependencies/kyverno/policy/e2e-reduce-resources.yaml

        echo "[INFO] Creating Test Resources..."
        ./deploy-test-resources.sh
      when:
        - input: "$(params.create-test-resources)"
          operator: in
          values: ["true"]
