apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: build-sealights-binaries
spec:
  description: |
    This task clones a repository, builds a container image with Sealights binaries, 
    and pushes the image to a container registry.
  results:
    - name: output-image
      description: The resulting container image containing Sealights binaries.
  params:
    - name: source-artifact
      description: The Trusted Artifact URI pointing to the artifact with
        the application source code.
      type: string
    - name: revision
      description: The Git commit SHA for checkout.
      type: string
      default: "main"
    - name: storage-driver
      description: The Buildah storage driver to use (e.g., vfs or overlay).
      type: string
      default: "vfs"
    - name: image
      description: The reference name for the image to be produced.
      type: string
      default: ""
    - name: dockerfile
      description: Path to the Dockerfile for building the image that contain sealights agents.
      type: string
      default: "./Dockerfile"
    - name: context
      description: Path to the build context directory.
      type: string
      default: "."
  volumes:
    - name: varlibcontainers
      emptyDir: {}
    - name: workdir
      emptyDir: {}
  stepTemplate:
    volumeMounts:
      - name: workdir
        mountPath: /var/workdir
      - name: varlibcontainers
        mountPath: /var/lib/containers
  steps:
    - name: use-trusted-artifact
      image: quay.io/redhat-appstudio/build-trusted-artifacts:latest@sha256:52f1391e6f1c472fd10bb838f64fae2ed3320c636f536014978a5ddbdfc6b3af
      args:
        - use
        - $(params.source-artifact)=/var/workdir/source
    - name: build-sealights-image
      image: registry.access.redhat.com/ubi9/buildah@sha256:c62b2318eb4709c216ad25969abae5ff6b56e9879d266b539a46fdfc99e8361e
      securityContext:
        capabilities:
          add:
            - SETFCAP
      env:
        - name: STORAGE_DRIVER
          value: $(params.storage-driver)
        - name: COMMIT_SHA
          value: $(params.revision)
        - name: DOCKERFILE
          value: $(params.dockerfile)
        - name: CONTEXT
          value: $(params.context)
        - name: IMAGE
          value: $(params.image)
        - name: SOURCE_CODE_DIR
          value: "/var/workdir/source"
      script: |
        #!/bin/bash
        set -euo pipefail

        # Determine the path to the Dockerfile
        dockerfile_path=""
        if [ -e "$SOURCE_CODE_DIR/$CONTEXT/$DOCKERFILE" ]; then
          dockerfile_path="$SOURCE_CODE_DIR/$CONTEXT/$DOCKERFILE"
        elif [ -e "$SOURCE_CODE_DIR/$DOCKERFILE" ]; then
          dockerfile_path="$SOURCE_CODE_DIR/$DOCKERFILE"
        else
          echo "Error: Cannot find Dockerfile $DOCKERFILE"
          exit 1
        fi

        # Build the image with Buildah
        buildah build \
          --ulimit nofile=4096:4096 \
          -f "$dockerfile_path" -t "${IMAGE}" "$SOURCE_CODE_DIR/$CONTEXT"

        # Push the image to the container registry
        buildah push \
          --tls-verify=true \
          --retry=5 "$IMAGE"

        # Output the resulting image reference
        DIGEST_IMAGE=$(buildah images --format '{{ .Name }}:{{ .Tag }}@{{ .Digest }}' --filter reference="$IMAGE")

        # Output the resulting image reference and digest
        echo "$IMAGE" > $(results.output-image.path)
